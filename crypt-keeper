#!/usr/bin/env bash
set -eo pipefail

DOCKER_REGISRY_USER=getpagespeed

function generate() {
    SOURCES=${SOURCES-/sources}
    OUTPUT=${OUTPUT-/output}
    WORKSPACE=${WORKSPACE-/workspace}
    RPM_BUILD_DIR=${RPM_BUILD_DIR-/rpmbuild}

    DISTRO=${1-fedora}
    RELEASE=${2-latest}
    # Last EPEL is 7 so far:
    RELEASE_EPEL=${2-7}

    ROOT=$(pwd)/${DISTRO}/${RELEASE}/
    ASSETS=${ROOT}/assets
    DOCKERFILE=${ROOT}/Dockerfile
    rm -rf ${ROOT} && mkdir -p ${ROOT}

    # prepare files
    cp -R ./assets ${ROOT}/.
    # cp LICENCE README.md
    YUM="yum"
    PACKAGES="rpm-build rpmdevtools yum-utils rpmlint"
    case "${DISTRO}" in
        centos|cloudrouter*centos)
            # The PRE_ packages are typically release files, and need to be installed in a separate step to build ones
            PRE_PACKAGES="epel-release centos-release-scl https://extras.getpagespeed.com/release-el${RELEASE_EPEL}-latest.rpm";
            # CircleCI in EL6 sometimes fails (support claims it's due to lack of "official" git)
            # We threw latest git to our EL6 repo (clean Fedora rebuilt)
            PACKAGES="${PACKAGES} @buildsys-build git devtoolset-8-gcc-c++ devtoolset-8-binutils"
            # @buildsys-build is to better "emulate" mock by preinstalling gcc thus preventing devtoolset-* lookup for "BuildRequires: gcc"
            # devtoolset-8 is for faster CI builds of packages that want to use it
            ;;
        fedora)
            YUM="dnf";
            # Just a dummy pre-install to simplify RUN step below
            PRE_PACKAGES="dnf"
            PACKAGES="'dnf-command(builddep)'";
            ;;
    esac
    # header
    cat > ${DOCKERFILE} << EOF
FROM ${DISTRO}:${RELEASE}
MAINTAINER "Danila Vershinin" <info@getpagespeed.com>

ENV WORKSPACE=${WORKSPACE} \\
    SOURCES=${SOURCES} \\
    OUTPUT=${OUTPUT} \\
    RPM_BUILD_DIR=${RPM_BUILD_DIR}

# this is required to disable source repos that yum-builddep unnecessarily enables. this is no longer required. see patch below
# RUN rm -rf /etc/yum.repos.d/{CentOS-Sources.repo,CentOS-Sources.repo} $(test "$EXTRA_RELEASES" && echo "&& yum -y install ${EXTRA_RELEASES}")
# RUN [ -f "/etc/yum.repos.d/CentOS-SCLo-scl-rh.repo" ] && sed -i '/centos-sclo-rh-source/,//d' /etc/yum.repos.d/CentOS-SCLo-scl-rh.repo
# RUN [ -f "/etc/yum.repos.d/CentOS-SCLo-scl.repo" ] && sed -i '/centos-sclo-sclo-source/,//d' /etc/yum.repos.d/CentOS-SCLo-scl.repo

ADD ./assets/build /usr/bin/build
ADD ./assets/rpmlint.config /etc/rpmlint/custom.config
# patch yum-builddep to NOT enable source repos if .spec file is used (fixes bug)
ADD ./assets/yum-builddep.patch /tmp/yum-builddep.patch

RUN useradd builder -G wheel \\
    && ${YUM} -y install ${PRE_PACKAGES} \\
    && ${YUM} -y install ${PACKAGES} \\
    && ${YUM} -y clean all \\
    && ln -sf \${RPM_BUILD_DIR} /root/rpmbuild \\
    && mkdir -p \${SOURCES} \${OUTPUT} \\
    && runuser builder rpmdev-setuptree \\
    && (patch /usr/bin/yum-builddep --forward /tmp/yum-builddep.patch || true)

VOLUME ["\${SOURCES}", "\${OUTPUT}"]

CMD ["build"]
EOF
}

function map-all() {
    while IFS=' ' read -r -a input; do 
        $1 ${input[0]} ${input[1]}
    done < ./defaults
}

function docker-image-name() {
    DISTRO=${1}
    VERSION=${2}
    echo -n "${DOCKER_REGISRY_USER}/rpmbuilder:${DISTRO/\//-}-${VERSION}"
   
}

function build() {
    DISTRO=${1}
    VERSION=${2}
    cd ${DISTRO}/${VERSION} \
        && docker build -t $(docker-image-name ${DISTRO} ${VERSION}) .
    cd -
}

function push() {
    DISTRO=${1}
    VERSION=${2}
    docker push $(docker-image-name ${DISTRO} ${VERSION})
}

case "$1" in
    generate|build|push)
        if [ "$2" == "all" ]; then
            map-all $1
        else
            $1 $2 $3 
        fi ;;
esac
