#!/usr/bin/env bash

# use exit codes of failing commands
set -exo pipefail

SOURCES=${SOURCES-/sources}
OUTPUT=${OUTPUT-${SOURCES}}
WORKSPACE=${WORKSPACE-/workspace}

RPM_BUILD_SOURCES=$(rpmbuild --eval '%{_sourcedir}')
RPM_BUILD_RPMS=$(rpmbuild --eval '%{_rpmdir}')
RPM_BUILD_SRPMS=$(rpmbuild --eval '%{_srcrpmdir}')

# make a copy
cp -R ${SOURCES}/* ${WORKSPACE}/.

# fix permissions on working copy
chown root:root ${WORKSPACE}/*

# copy any non-spec files/dirs to source directory
find ${WORKSPACE} -mindepth 1 -maxdepth 1 ! -name "*.spec" \
    -exec cp -R {} ${RPM_BUILD_SOURCES}/. \;

BUILDDEP_CMD=yum-builddep
command -v dnf > /dev/null 2>&1 && BUILDDEP_CMD="dnf builddep"

for specFile in ${WORKSPACE}/*.spec; do
  # install build requires
  ${BUILDDEP_CMD} -y $specFile
  spectool --sourcedir --get-files $specFile

  # build SRPM, also allows to fail quicker
  rpmbuild -bs $specFile

  if [[ -n ${RPMLINT} ]]; then
    # SRPM built successfully. Check it using rpmlint
    rpmlint ${RPM_BUILD_SRPMS}/*.rpm
  fi

  mv ${RPM_BUILD_SRPMS}/*.rpm ${OUTPUT}

  if [[ -z ${SRPM_ONLY} ]]; then
    # attempting to build RPM now
    rpmbuild -ba $specFile

    if [[ -n ${RPMLINT} ]]; then
      # RPM built successfully. Check it using rpmlint
      rpmlint ${RPM_BUILD_RPMS}/*/*.rpm
    fi

    mv ${RPM_BUILD_RPMS}/*/*.rpm ${OUTPUT}
  fi
done

# fix uids
if [ -z "${OUTPUT_UID}" ]; then
   chown -R ${OUTPUT_UID}:${OUTPUT_UID} ${OUTPUT}/*
fi
