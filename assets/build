#!/usr/bin/env bash

# use exit codes of failing commands
set -exo pipefail

# `bc` is needed for floating point arithmetic, fail if not present
command -v bc > /dev/null 2>&1 || { echo "bc is required but not installed. Aborting." >&2; exit 1; }

SOURCES=${SOURCES-/sources}
OUTPUT=${OUTPUT-${SOURCES}}

# The following is to support legacy prepare.sh scripts which call "yum" on "dnf" systems
# Creates a symlink to dnf if yum is not present
if [[ -f /usr/bin/dnf ]]; then
  if [[ ! -f /usr/bin/yum ]]; then
    ln -s /usr/bin/dnf /usr/bin/yum
  fi
fi

# Initialize default values for options and flags, but attempt to use env var
# if it is set
FORCE="${FORCE:-false}"
# Whether need to clean existing .spec files in rpm specs directory,
# useful when running multiple build commands in a flow
CLEAN=false

# Loop through the arguments
while [[ "$1" != "" ]]; do
    case $1 in
        --force )
            FORCE=true
            ;;
        --clean )
            CLEAN=true
            ;;
        --enable-repos )
            shift # Move to the next argument, which should be the value for --option
            if [[ -n $1 ]]; then
                ENABLE_REPOS=$1
            else
                echo "Error: --enable-repos requires a value."
                exit 1
            fi
            ;;
        * )
            echo "Invalid option: $1"
            exit 1
            ;;
    esac
    shift # Move to the next argument
done

RHEL=$(rpm -E "0%{?rhel}")
# removes leading zeros, e.g. 07 becomes 0, but 0 stays 0
RHEL=${RHEL##+(0)}

# https://docs.oracle.com/cd/E93554_01/E69348/html/uek4-czc_xmc_xt.html
touch /var/lib/rpm/*

# enable specified repositories before build
if [[ -n ${ENABLE_REPOS} ]]; then
  # if ENABLE_REPOS is getpagespeed-extras-plesk, then drop a yum configuration for
  # Plesk from https://www.getpagespeed.com/files/getpagespeed-extras-plesk.repo first
  if [ "${ENABLE_REPOS}" = "getpagespeed-extras-plesk" ]; then
    curl -o /etc/yum.repos.d/getpagespeed-extras-plesk.repo https://www.getpagespeed.com/files/getpagespeed-extras-plesk.repo
  fi
  if command -v dnf5 > /dev/null 2>&1; then
    dnf5 config-manager setopt "${ENABLE_REPOS}".enabled=1
  elif [ "$RHEL" -gt "0" ] && [ "$RHEL" -le "7" ]; then  # if more than 0 and less or equal than 7
    yum-config-manager --enable "${ENABLE_REPOS}"
  else
    dnf config-manager --set-enabled "${ENABLE_REPOS}"
  fi
fi

# Use custom rpmlint config per repository, if such exists
[ -f "${SOURCES}/rpmlint.config" ] && cp -f "${SOURCES}"/rpmlint.config /etc/rpmlint/custom.config
# Run optional per-repo file with extra build preparations needed like setting up more repos
[ -f "${SOURCES}"/prepare.sh ] && bash "${SOURCES}"/prepare.sh

# each repo can go with rpmmacros (useful for building multiple branches while retaining same spec)
[ -f "${SOURCES}"/rpmmacros ] \
  && cat "${SOURCES}"/rpmmacros >> /root/.rpmmacros \
  && chown root:root /root/.rpmmacros

# Use rpm instead of rpmbuild to avoid bad exit in EL6
RPM_BUILD_SOURCES=$(rpm --eval '%{_sourcedir}')
RPM_BUILD_RPMS=$(rpm --eval '%{_rpmdir}')
RPM_BUILD_SRPMS=$(rpm --eval '%{_srcrpmdir}')
RPM_BUILD_SPECS=$(rpm --eval '%{_specdir}')

if [ "$CLEAN" = true ]; then
  # clean existing source and .spec files
  rm -f "${RPM_BUILD_SPECS}"/*.spec
  rm -rf "${RPM_BUILD_SOURCES}"/*
fi
# copy any .spec filess to rpmbuild/SPECS directory
find "${SOURCES}" -mindepth 1 -maxdepth 1 -name "*.spec" \
    -exec cp -R {} "${RPM_BUILD_SPECS}"/. \;

# copy any non-spec files/dirs to rpmbuild/SOURCES directory
find "${SOURCES}" -mindepth 1 -maxdepth 1 ! -name "*.spec" \
    -exec cp -R {} "${RPM_BUILD_SOURCES}"/. \;

# fix permissions on working copy
chown root:root /root/rpmbuild

# VMOD tests during build:
# varnishd is dropping to user nobody/varnish, and as such doesn't have access in /root/
chmod 0755 /root

# With SCLO repos in place, yum-builddep might resolve "BuildRequires: gcc" to devtoolset-4-gcc
# In Docker image we pre-install build sys root (gcc) to mimic mock better and avoid this bad lookup
BUILDDEP_CMD="yum-builddep"
command -v dnf > /dev/null 2>&1 && BUILDDEP_CMD="dnf builddep"
RPMBUILD_SETARCH=""
if [[ -n ${SETARCH} && "${SETARCH}" != "x86_64" ]]; then
  # getting builddep to fetch i686 RPMs from x86_64 repo is no easy task :D
  RPMBUILD_SETARCH="setarch ${SETARCH}"
  echo x86_64 > /etc/yum/vars/basearch
fi

# Universal wrapper function for repoquery across different RHEL/CentOS versions
universal_repoquery() {
    local package=$1

    # Check if dnf or repoquery is available
    if command -v dnf > /dev/null 2>&1; then
        # RHEL 8+ and Fedora
        dnf repoquery -q "${package}"
    elif command -v repoquery > /dev/null 2>&1; then
        # RHEL 7 and below
        repoquery -q "${package}"
    else
        # If neither is available, return empty (indicating no packages found)
        echo ""
    fi
}

# Function to check if all packages from a spec file are present in the repository
check_packages_in_repo() {
    local spec_file=$1

    # Generate the list of packages from the .spec file
    local packages
    if ! packages=$(rpmspec -q --qf '%{NAME}-%{EPOCH}:%{VERSION}-%{RELEASE}.*\n' "${spec_file}" | sed 's/(none)://g'); then
        echo "Failed to parse spec file ${spec_file}"
        return 1
    fi

    # Loop through each package and check if it exists in the repository
    for package in $packages; do
        # Use the universal_repoquery function to check if the package is present
        local result

        if ! result=$(universal_repoquery "${package}"); then
            echo "Error while checking for package ${package} in the repository."
            return 1
        fi

        # If the result is empty, it means the package is NOT present
        if [[ -z "${result}" ]]; then
            echo "Package ${package} is NOT present in the repository."
            return 1  # Exit with code 1 if any package is missing
        fi
    done

    # If all packages are present
    echo "All packages from ${spec_file} are present in the repository."
    return 0  # Exit with code 0 if all packages are present
}

# define function to build a single spec file
build_spec() {
  local specFile=$1
  if [ "$FORCE" = true ]; then
    echo "Building packages without checking repository because --force is set"
  elif check_packages_in_repo "${specFile}"; then
    echo "Skipping build for ${specFile} as all packages are present in the repository."
      return 0
  else
    echo "Building packages as some are missing upon check with repository."
  fi
  if [[ -n ${RPMLINT} && "${RPMLINT}" != 0 ]]; then
    # check the spec file for obvious errors using rpmlint
    rpmlint "$specFile"
  fi

  # install build requires
  if ! ${BUILDDEP_CMD} -y "$specFile"; then
    pkgr clean all
    if ! ${BUILDDEP_CMD} -y "$specFile"; then
      echo "Failed to install build dependencies for $specFile"
      return 1
    fi
  fi

  # repeat step for chosen arch
  if [[ -n ${SETARCH} && "${SETARCH}" != "x86_64" ]]; then
    if ! ${RPMBUILD_SETARCH} "${BUILDDEP_CMD}" -y "$specFile"; then
      pkgr clean all
      ${RPMBUILD_SETARCH} "${BUILDDEP_CMD}" -y "$specFile"
    fi
  fi

  spectool --sourcedir --get-files "$specFile"

  # build source RPM, also allows to fail quicker
  rpmbuild -bs "$specFile"

  if [[ -n ${RPMLINT} && "${RPMLINT}" != 0 ]]; then
    # Source RPM built successfully. Check it using rpmlint
    if test -f /etc/rpmlint/custom.config && test -d /etc/xdg/rpmlint; then
      # if we quote the wildcard in the argument to rpmlint, it will trigger
      # to E: multiple-specfiles
      # so we need to ensure bash wildcard is used/unquoted
      rpmlint "${RPM_BUILD_SRPMS}"/*.rpm --rpmlintrc /etc/rpmlint/custom.config
    else
      rpmlint "${RPM_BUILD_SRPMS}"/*.rpm
    fi
  fi

  mv "${RPM_BUILD_SRPMS}"/*.rpm "${OUTPUT}"

  if [[ -z ${SRPM_ONLY} ]]; then

    # attempting to build RPM now
    ${RPMBUILD_SETARCH} rpmbuild -ba "$specFile"

    if [[ -n ${RPMLINT} && "${RPMLINT}" != 0 ]]; then
      # RPMs built successfully. Check using rpmlint
      # Skip debuginfo packages from rpmlint because:
      # * their rpmlint failure is never crucial to the actual app's delivery!
      # * we can never fix these: "E: description-line-too-long C This package provides debug information for package <some lengthy name>"
      # * because there is no control of it and some packages just have to be lengthy in names
      find "${RPM_BUILD_RPMS}" -type f \
        -not -name "*-debuginfo-*" -not -name "*-debugsource-*" -name "*.rpm" \
        -exec rpmlint {} \;
    fi
    mv "${RPM_BUILD_RPMS}"/*/*.rpm "${OUTPUT}"
  fi
}

total_modules=$(find "${RPM_BUILD_SPECS}" -name "*.spec" | wc -l)
if [[ "$total_modules" -eq 0 ]]; then
  echo "No spec files found. Exiting."
  exit 1
fi

success_count=0
fail_count=0
failure_tolerance=0.1  # Example: Allow up to 10% of modules to fail

for specFile in "${RPM_BUILD_SPECS}"/*.spec; do
  if build_spec "${specFile}"; then
    success_count=$((success_count + 1))
  else
    fail_count=$((fail_count + 1))
  fi

  fail_rate=$(echo "scale=2; $fail_count / $total_modules" | bc)
  if (( $(echo "$fail_rate > $failure_tolerance" | bc -l) )); then
    echo "Built $success_count specs successfully, but $fail_count failed out of $total_modules total spec files."
    echo "Failure tolerance exceeded. Exiting build."
    exit 1
  fi

done

# fix user IDs for output files
if [ -n "${OUTPUT_UID}" ]; then
   chown -R "${OUTPUT_UID}:${OUTPUT_UID}" "${OUTPUT}"/*
fi
