#!/usr/bin/env bash

# use exit codes of failing commands
set -exo pipefail

SOURCES=${SOURCES-/sources}
OUTPUT=${OUTPUT-${SOURCES}}

# Use rpm instead of rpmbuild to avoid bad exit in EL6
RPM_BUILD_SOURCES=$(runuser builder -c "rpm --eval '%{_sourcedir}'")
RPM_BUILD_RPMS=$(runuser builder -c "rpm --eval '%{_rpmdir}'")
RPM_BUILD_SRPMS=$(runuser builder -c "rpm --eval '%{_srcrpmdir}'")
RPM_BUILD_SPECS=$(runuser builder -c "rpm --eval '%{_specdir}'")

echo $ RPM_BUILD_SPECS
# copy any .spec filess to rpmbuild/SPECS directory
find ${SOURCES} -mindepth 1 -maxdepth 1 -name "*.spec" \
    -exec cp -R {} ${RPM_BUILD_SPECS}/. \;

# copy any non-spec files/dirs to rpmbuild/SOURCES directory
find ${SOURCES} -mindepth 1 -maxdepth 1 ! -name "*.spec" \
    -exec cp -R {} ${RPM_BUILD_SOURCES}/. \;
    
# fix permissions on working copy
chown builder:builder /home/builder/rpmbuild    

# With SCLO repos in place, yum-builddep might resolve "BuildRequires: gcc" to devtoolset-4-gcc
# In Docker image we pre-install build sys root (gcc) to mimic mock better and avoid this bad lookup
BUILDDEP_CMD="yum-builddep"
command -v dnf > /dev/null 2>&1 && BUILDDEP_CMD="dnf builddep"

for specFile in ${RPM_BUILD_SPECS}/*.spec; do

  if [[ -n ${RPMLINT} ]]; then
    # check the spec file for obvious errors using rpmlint
    rpmlint $specFile
  fi

  # install build requires
  ${BUILDDEP_CMD} -y $specFile
  runuser builder -c "spectool --sourcedir --get-files $specFile"

  # build SRPM, also allows to fail quicker
  runuser builder -c "rpmbuild -bs $specFile"

  if [[ -n ${RPMLINT} ]]; then
    # SRPM built successfully. Check it using rpmlint
    rpmlint ${RPM_BUILD_SRPMS}/*.rpm
  fi

  mv ${RPM_BUILD_SRPMS}/*.rpm ${OUTPUT}

  if [[ -z ${SRPM_ONLY} ]]; then
    # attempting to build RPM now
    runuser builder -c "rpmbuild -ba $specFile"

    if [[ -n ${RPMLINT} ]]; then
      # RPM built successfully. Check it using rpmlint
      rpmlint ${RPM_BUILD_RPMS}/*/*.rpm
    fi

    mv ${RPM_BUILD_RPMS}/*/*.rpm ${OUTPUT}
  fi
done

# fix uids
if [ -z "${OUTPUT_UID}" ]; then
   chown -R ${OUTPUT_UID}:${OUTPUT_UID} ${OUTPUT}/*
fi
