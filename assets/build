#!/usr/bin/env bash

# use exit codes of failing commands
set -exo pipefail

SOURCES=${SOURCES-/sources}
OUTPUT=${OUTPUT-${SOURCES}}

# enable specified repositories before build
if [[ -n ${ENABLE_REPOS} ]]; then
  RHEL=$(rpm -E '%{rhel}')
  if [ "$RHEL" -lt "8" ]; then
    yum-config-manager --enable "${ENABLE_REPOS}"
  else
    dnf config-manager --set-enabled "${ENABLE_REPOS}"
  fi
fi

# Use custom rpmlint config per repository, if such exists
[ -f "${SOURCES}/rpmlint.config" ] && mv -f ${SOURCES}/rpmlint.config /etc/rpmlint/custom.config
# Run optional per-repo file with extra build preparations needed like setting up more repos
[ -f ${SOURCES}/prepare.sh ] && bash ${SOURCES}/prepare.sh

# each repo can go with rpmmacros (useful for building multiple branches while retaining same spec)
[ -f ${SOURCES}/rpmmacros ] \
  && cat ${SOURCES}/rpmmacros >> /root/.rpmmacros \
  && chown root:root /root/.rpmmacros 

# Use rpm instead of rpmbuild to avoid bad exit in EL6
RPM_BUILD_SOURCES=$(rpm --eval '%{_sourcedir}')
RPM_BUILD_RPMS=$(rpm --eval '%{_rpmdir}')
RPM_BUILD_SRPMS=$(rpm --eval '%{_srcrpmdir}')
RPM_BUILD_SPECS=$(rpm --eval '%{_specdir}')

echo $ RPM_BUILD_SPECS
# copy any .spec filess to rpmbuild/SPECS directory
find ${SOURCES} -mindepth 1 -maxdepth 1 -name "*.spec" \
    -exec cp -R {} ${RPM_BUILD_SPECS}/. \;

# copy any non-spec files/dirs to rpmbuild/SOURCES directory
find ${SOURCES} -mindepth 1 -maxdepth 1 ! -name "*.spec" \
    -exec cp -R {} ${RPM_BUILD_SOURCES}/. \;
    
# fix permissions on working copy
chown root:root /root/rpmbuild    

# VMOD tests during build:
# varnishd is dropping to user nobody/varnish, and as such doesn't have access in /root/
chmod 0755 /root

# With SCLO repos in place, yum-builddep might resolve "BuildRequires: gcc" to devtoolset-4-gcc
# In Docker image we pre-install build sys root (gcc) to mimic mock better and avoid this bad lookup
BUILDDEP_CMD="yum-builddep"
command -v dnf > /dev/null 2>&1 && BUILDDEP_CMD="dnf builddep"
RPMBUILD_SETARCH=""
if [[ -n ${SETARCH} && "${SETARCH}" != "x86_64" ]]; then
  # getting builddep to fetch i686 RPMs from x86_64 repo is no easy task :D
  RPMBUILD_SETARCH="setarch ${SETARCH}"
  echo x86_64 > /etc/yum/vars/basearch
fi

for specFile in ${RPM_BUILD_SPECS}/*.spec; do

  if [[ -n ${RPMLINT} && "${RPMLINT}" != 0 ]]; then
    # check the spec file for obvious errors using rpmlint
    rpmlint $specFile
  fi

  # install build requires
  if ! ${BUILDDEP_CMD} -y $specFile; then
    yum clean all
    ${BUILDDEP_CMD} -y $specFile
  fi
  
  # repeat step for chosen arch
  if [[ -n ${SETARCH} && "${SETARCH}" != "x86_64" ]]; then
    if ! ${RPMBUILD_SETARCH} ${BUILDDEP_CMD} -y $specFile; then
      yum clean all
      ${RPMBUILD_SETARCH} ${BUILDDEP_CMD} -y $specFile
    fi
  fi
  
  spectool --sourcedir --get-files $specFile

  # build SRPM, also allows to fail quicker
  rpmbuild -bs $specFile

  if [[ -n ${RPMLINT} && "${RPMLINT}" != 0 ]]; then
    # SRPM built successfully. Check it using rpmlint
    rpmlint ${RPM_BUILD_SRPMS}/*.rpm
  fi

  mv ${RPM_BUILD_SRPMS}/*.rpm ${OUTPUT}

  if [[ -z ${SRPM_ONLY} ]]; then
    # attempting to build RPM now
    ${RPMBUILD_SETARCH} rpmbuild -ba $specFile

    if [[ -n ${RPMLINT} && "${RPMLINT}" != 0 ]]; then
      # RPMs built successfully. Check using rpmlint
      # Skip debuginfo packages from rpmlint because:
      # * their rpmlint failure is never crucial to the actual app's delivery!
      # * we can never fix these: "E: description-line-too-long C This package provides debug information for package <some lengthy name>"
      # * because there is no control of it and some packages just have to be lengthy in names
      find ${RPM_BUILD_RPMS} -type f \
        -not -name "*-debuginfo-*" -not -name "*-debugsource-*" -name "*.rpm" \
        -exec rpmlint {} \;
    fi

    mv ${RPM_BUILD_RPMS}/*/*.rpm ${OUTPUT}
  fi
done

# fix uids
if [ -z "${OUTPUT_UID}" ]; then
   chown -R ${OUTPUT_UID}:${OUTPUT_UID} ${OUTPUT}/*
fi
